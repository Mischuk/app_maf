{"version":3,"sources":["serviceWorkerRegistration.ts","reportWebVitals.ts","utils/enums.ts","components/InputNumeric/InputNumeric.tsx","pages/Settings/Settings.tsx","App.tsx","utils/helpers.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","GameStep","RolesEnum","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","InputNumeric","value","onChange","isDisabledDec","isDisabledInc","label","min","max","handleChange","step","className","onClick","disabled","DEFAULT_CONFIG","totalPlayers","citizens","mafias","activeRoles","Settings","onSubmit","useState","setConfig","isActiveRolesDisabled","setIsActiveRolesDisabled","isTotalLocked","setIsTotalLocked","updateConfig","field","prevCfg","useEffect","totalCitizens","totalMafias","length","App","setStep","setSelectedRoles","html","document","documentElement","Roles","classList","add","remove","roles","array","randomIndex","currentIndex","Math","floor","random","shuffle","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.68007db6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export enum GameStep {\n    Settings = 0,\n    Roles = 1,\n    Final = 2\n}\n\nexport enum RolesEnum {\n    Citizen = \"Citizen\",\n    Mafia = \"Mafia\",\n    Whore = \"Whote\",\n    Doctor = \"Doctor\",\n    Immortal = \"BESSMERTNYI\",\n    Comissar = \"KOMISAR\",\n    Judge = \"Judge\"\n}\n","import { FC } from \"react\";\nimport \"./InputNumeric.styles.scss\";\n\ninterface iProps {\n    value: number;\n    onChange: (value: number) => void;\n    isDisabledDec?: boolean;\n    isDisabledInc?: boolean;\n    label?: string;\n    min?: number;\n    max?: number;\n}\n\nexport const InputNumeric: FC<iProps> = ({ value, onChange, isDisabledDec, isDisabledInc, label, min, max }) => {\n    const handleChange = (step: number) => {\n        onChange(value + step);\n    };\n\n    return (\n        <div className=\"InputNumeric\">\n            {label && <div className=\"InputNumeric__label\">{label}</div>}\n\n            <div className=\"InputNumeric__control\">\n                <button\n                    className=\"InputNumeric__button is-down\"\n                    onClick={() => handleChange(-1)}\n                    disabled={(value === min) || isDisabledDec}\n                >\n                    -\n                </button>\n\n                <div className=\"InputNumeric__input\">{value}</div>\n\n                <button\n                    className=\"InputNumeric__button is-up\"\n                    onClick={() => handleChange(1)}\n                    disabled={(value === max) || isDisabledInc}\n                >\n                    +\n                </button>\n            </div>\n        </div>\n    );\n};\n","import { Checkbox } from \"@components/Checkbox/Checkbox\";\nimport { InputNumeric } from \"@components/InputNumeric/InputNumeric\";\nimport { RolesEnum } from \"@utils/enums\";\nimport { ACTIVE_ROLES, iActiveRole } from \"@utils/roles\";\nimport { FC, useEffect, useState } from \"react\";\nimport \"./Settings.styles.scss\";\n\nconst DEFAULT_CONFIG = {\n    totalPlayers: 6,\n    citizens: 5,\n    mafias: 1,\n    activeRoles: [],\n};\n\ninterface iGameConfig {\n    totalPlayers: number;\n    citizens: number;\n    mafias: number;\n    activeRoles: iActiveRole[];\n}\n\ninterface iProps {\n    onSubmit: (roles: RolesEnum[]) => void;\n}\n\nexport const Settings: FC<iProps> = ({ onSubmit }) => {\n    const [config, setConfig] = useState<iGameConfig>(DEFAULT_CONFIG);\n    const [isActiveRolesDisabled, setIsActiveRolesDisabled] = useState(false);\n    const [isTotalLocked, setIsTotalLocked] = useState(false);\n\n    const updateConfig = <T extends keyof iGameConfig>(field: T, value: iGameConfig[T]) => {\n        setConfig(prevCfg => ({ ...prevCfg, [field]: value }));\n    };\n\n    const onChangeTotalPlayers = (totalPlayers: number) => {\n        updateConfig(\"totalPlayers\", totalPlayers);\n        updateConfig(\"citizens\", totalPlayers - 1);\n        updateConfig(\"mafias\", 1);\n        updateConfig(\"activeRoles\", []);\n        setIsActiveRolesDisabled(totalPlayers <= 4);\n    };\n\n    const onChangeTotalMafias = (totalMafias: number) => {\n        const totalCitizens = config.totalPlayers - totalMafias - config.activeRoles.length;\n        updateConfig(\"mafias\", totalMafias);\n        updateConfig(\"citizens\", totalCitizens);\n    };\n\n    const onChangeTotalCitizens = (totalCitizens: number) => {\n        const totalMafias = config.totalPlayers - totalCitizens - config.activeRoles.length;\n        updateConfig(\"citizens\", totalCitizens);\n        updateConfig(\"mafias\", totalMafias);\n    };\n\n    const onChangeActiveRoles = (role: iActiveRole) => {\n        const { activeRoles, citizens, mafias, totalPlayers } = config;\n        const currentIndex = activeRoles.findIndex(({ id }) => id === role.id);\n        const isRemoving = currentIndex >= 0;\n\n        const totalCitizens = citizens + (isRemoving ? 1 : -1);\n        if (\n            !isRemoving &&\n            citizens === 0 &&\n            citizens + mafias + activeRoles.length >= totalPlayers\n        ) {\n            updateConfig(\"mafias\", mafias - 1);\n        } else {\n            updateConfig(\"citizens\", totalCitizens);\n        }\n\n        updateConfig(\n            \"activeRoles\",\n            isRemoving\n                ? [...activeRoles].filter(item => item.id !== role.id)\n                : [...activeRoles, role],\n        );\n    };\n\n    useEffect(() => {\n        if (isActiveRolesDisabled) {\n            updateConfig(\"activeRoles\", []);\n            updateConfig(\"citizens\", config.totalPlayers - config.mafias);\n        }\n    }, [config.mafias, config.totalPlayers, isActiveRolesDisabled]);\n\n    const handleSubmitSettings = () => {\n        const { citizens, mafias, activeRoles } = config;\n\n        onSubmit([\n            ...Array.from(Array(citizens).fill(RolesEnum.Citizen)),\n            ...Array.from(Array(mafias).fill(RolesEnum.Mafia)),\n            ...activeRoles.map(({ title }) => title),\n        ]);\n    };\n\n    return (\n        <div className=\"Settings\">\n            {!isTotalLocked && (\n                <div className=\"Settings__wrapper\">\n                    <div className=\"Settings__total\">\n                        <InputNumeric\n                            label=\"TOTAL PLAYERS\"\n                            value={config.totalPlayers}\n                            min={3}\n                            onChange={onChangeTotalPlayers}\n                        />\n\n                        <div className=\"Settings__next\">\n                            <div className=\"Settings__button-next\" onClick={() => setIsTotalLocked(true)}>NEXT</div>\n                        </div>\n                    </div>\n\n                    <div className=\"Settings__description\">\n                        <span>Описание ролей</span>\n                    </div>\n                </div>\n            )}\n            {isTotalLocked && (\n                <div className=\"Settings__content\">\n                    <div className=\"Settings__row\">\n                        <div>\n                            <InputNumeric\n                                label=\"Peace\"\n                                value={config.citizens}\n                                min={0}\n                                onChange={onChangeTotalCitizens}\n                                isDisabledInc={\n                                    config.citizens + config.activeRoles.length >=\n                                    config.totalPlayers - 1\n                                }\n                                isDisabledDec={\n                                    config.citizens + config.activeRoles.length <= config.mafias\n                                }\n                            />\n                        </div>\n                        <br />\n                        <br />\n                        <div>\n                            <InputNumeric\n                                label=\"кол-во мафий\"\n                                value={config.mafias}\n                                min={1}\n                                isDisabledInc={\n                                    config.mafias >= config.citizens + config.activeRoles.length ||\n                                    config.citizens === 0\n                                }\n                                onChange={onChangeTotalMafias}\n                            />\n                        </div>\n                    </div>\n\n                    {/* {!isActiveRolesDisabled && (\n                        <div className=\"Settings__row\">\n                            <div className=\"Settings__title\">Активные роли</div>\n                            <div className=\"Settings__roles\">\n                                {ACTIVE_ROLES.map(role => (\n                                    <Checkbox\n                                        onChange={() => onChangeActiveRoles(role)}\n                                        label={role.title}\n                                        key={role.id}\n                                        isChecked={\n                                            !!config.activeRoles.find(item => item.id === role.id)\n                                        }\n                                    />\n                                ))}\n                            </div>\n                            <div className=\"Settings__action\">\n                                <button onClick={handleSubmitSettings}>ОК</button>\n                            </div>\n                        </div>\n                    )} */}\n                </div>\n            )}\n        </div>\n    );\n};\n","import { PlayerRoles } from \"@pages/PlayerRoles/PlayerRoles\";\nimport { Results } from \"@pages/Results/Results\";\nimport { Settings } from \"@pages/Settings/Settings\";\nimport { GameStep, RolesEnum } from \"@utils/enums\";\nimport { shuffle } from \"@utils/helpers\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.styles.scss\";\n\nexport const App = () => {\n    const [step, setStep] = useState<GameStep>(GameStep.Settings);\n    const [selectedRoles, setSelectedRoles] = useState<RolesEnum[]>([]);\n\n    const onSubmitSettings = (roles: RolesEnum[]) => {\n        setSelectedRoles(shuffle(roles));\n        setStep(GameStep.Roles);\n    };\n\n    const onShowResult = () => {\n        setStep(GameStep.Final);\n    };\n\n    useEffect(() => {\n        const html = document.documentElement;\n\n        if (step === GameStep.Roles) {\n            html.classList.add(\"is-fixed\");\n        } else {\n            html.classList.remove(\"is-fixed\");\n        }\n    }, [step]);\n\n    return (\n        <div className=\"App\">\n            <Settings onSubmit={onSubmitSettings} />\n\n            {/* {step === GameStep.Settings && (\n                <Settings onSubmit={onSubmitSettings} />\n            )}\n            {step === GameStep.Roles && (\n                <PlayerRoles\n                    roles={selectedRoles}\n                    onShowResult={onShowResult}\n                />\n            )}\n            {step === GameStep.Final && (\n                <Results roles={selectedRoles} />\n            )} */}\n        </div>\n    );\n};\n","export const toggleInArray = <T>(array: T[], ...values: T[]) => {\n    let result = [...array];\n    if (values.length === 0) return [];\n    values.forEach((value) => {\n        if (array.includes(value)) {\n            result = result.filter((item) => item !== value);\n        } else {\n            result = [...result, value];\n        }\n    });\n    return result;\n}\n\nexport function shuffle<T>(array: T[]) {\n    let currentIndex = array.length;\n    let randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.scss';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}