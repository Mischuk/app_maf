{"version":3,"sources":["serviceWorkerRegistration.ts","reportWebVitals.ts","utils/enums.ts","components/Card/Card.tsx","pages/PlayerRoles/PlayerRoles.tsx","pages/Results/Results.tsx","components/Checkbox/Checkbox.tsx","components/InputNumeric/InputNumeric.tsx","utils/roles.ts","pages/Settings/Settings.tsx","App.tsx","utils/helpers.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","GameStep","RolesEnum","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Card","title","onNextRole","position","useState","showRole","setShowRole","isLock","setIsLock","className","onClick","setTimeout","Mafia","PlayerRoles","roles","onShowResult","playerIndex","setPlayerIndex","length","Results","isVisible","setIsVisible","map","el","idx","Checkbox","isChecked","onChange","label","InputNumeric","value","isDisabledDec","isDisabledInc","min","max","handleChange","step","disabled","ACTIVE_ROLES","id","Whore","cardImage","Doctor","Immortal","Sheriff","DEFAULT_CONFIG","totalPlayers","citizens","mafias","activeRoles","Settings","onSubmit","setConfig","isActiveRolesDisabled","setIsActiveRolesDisabled","updateConfig","field","prevCfg","useEffect","totalCitizens","totalMafias","role","isRemoving","findIndex","filter","item","onChangeActiveRoles","find","Array","from","fill","Citizen","App","setStep","selectedRoles","setSelectedRoles","html","document","documentElement","Roles","classList","add","remove","array","randomIndex","currentIndex","Math","floor","random","shuffle","Final","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.1e98ea6a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export enum GameStep {\n    Settings = 0,\n    Roles = 1,\n    Final = 2\n}\n\nexport enum RolesEnum {\n    Citizen = \"Мирный\",\n    Mafia = \"Мафия\",\n    Whore = \"Проститутка\",\n    Doctor = \"Доктор\",\n    Immortal = \"Бессмертный\",\n    Sheriff = \"Шериф\"\n}\n","import { RolesEnum } from \"@utils/enums\";\nimport { FC, useState } from \"react\";\nimport \"./Card.styles.scss\";\n\ninterface iProps {\n    title: string;\n    onNextRole: () => void;\n    position: number;\n}\n\nexport const Card: FC<iProps> = ({ title, onNextRole, position }) => {\n    const [showRole, setShowRole] = useState(false);\n    const [isLock, setIsLock] = useState(false);\n\n    const handleChangeCard = () => {\n        if ( isLock ) return;\n        setIsLock(true);\n        setTimeout(() => {\n            setIsLock(false);\n        }, 500);\n\n        if (showRole) {\n\n            setShowRole(false);\n\n            setTimeout(() => {\n                onNextRole();\n            }, 500);\n        } else {\n            setShowRole(true);\n        }\n    };\n\n    return (\n        <div className=\"Card\">\n            <div className={`flipcard ${showRole ? \"is-open\" : \"\"}`} onClick={handleChangeCard}>\n                <div className=\"flipcard__inner\">\n                    <div className=\"flipcard__front\">Игрок {position}</div>\n                    <div className={`flipcard__back ${title === RolesEnum.Mafia ? \"is-black\" : \"is-red\"}`}>\n                        <p>{title}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import { Card } from \"@components/Card/Card\";\nimport { RolesEnum } from \"@utils/enums\";\nimport { FC, useState } from \"react\";\nimport \"./PlayerRoles.styles.scss\";\n\ninterface iProps {\n    roles: RolesEnum[];\n    onShowResult: () => void;\n}\n\nexport const PlayerRoles: FC<iProps> = ({ roles, onShowResult }) => {\n    const [playerIndex, setPlayerIndex] = useState(0);\n\n    const onNextRole = () => {\n        if (playerIndex + 1 <= roles.length - 1) {\n            setPlayerIndex(playerIndex + 1);\n        } else {\n            onShowResult();\n        }\n    };\n\n    return (\n        <div className=\"PlayerRoles\">\n            <div className=\"PlayerRoles__content\">\n                <Card\n                    title={roles[playerIndex]}\n                    onNextRole={onNextRole}\n                    position={playerIndex + 1}\n                />\n            </div>\n        </div>\n    );\n};\n","import { FC, useState } from \"react\";\nimport \"./Results.styles.scss\";\n\ninterface iProps {\n    roles: string[];\n}\n\nexport const Results: FC<iProps> = ({ roles }) => {\n    const [isVisible, setIsVisible] = useState(false);\n    return (\n        <div className=\"Results\">\n            <div className=\"Results__toggle\" onClick={() => setIsVisible(!isVisible)}>\n                {isVisible ? \"Hide\" : \"Show\"} all roles\n            </div>\n            {isVisible && (\n                <div className=\"Results__content\">\n                    {roles.map((el, idx) => {\n                        return (\n                            <div key={idx}>\n                                Player #{idx + 1}: {el}\n                            </div>\n                        );\n                    })}\n                </div>\n            )}\n        </div>\n    );\n};\n","import { FC } from \"react\";\nimport \"./Checkbox.styles.scss\";\n\ninterface iProps {\n    isChecked: boolean;\n    onChange: () => void;\n    label: string;\n}\nexport const Checkbox: FC<iProps> = ({ isChecked, onChange, label }) => {\n    return (\n        <div className={`Checkbox ${isChecked ? \"is-checked\" : \"\"}`} onClick={onChange}>\n            <div className=\"Checkbox__label\">{label}</div>\n        </div>\n    );\n};\n","import { FC } from \"react\";\nimport \"./InputNumeric.styles.scss\";\n\ninterface iProps {\n    value: number;\n    onChange: (value: number) => void;\n    isDisabledDec?: boolean;\n    isDisabledInc?: boolean;\n    label?: string;\n    min?: number;\n    max?: number;\n}\n\nexport const InputNumeric: FC<iProps> = ({ value, onChange, isDisabledDec, isDisabledInc, label, min, max }) => {\n    const handleChange = (step: number) => {\n        onChange(value + step);\n    };\n\n    return (\n        <div className=\"InputNumeric\">\n            {label && <div className=\"InputNumeric__label\">{label}</div>}\n\n            <div className=\"InputNumeric__control\">\n                <button\n                    className=\"InputNumeric__button is-down\"\n                    onClick={() => handleChange(-1)}\n                    disabled={(value === min) || isDisabledDec}\n                >\n                    -\n                </button>\n\n                <div className=\"InputNumeric__input\">{value}</div>\n\n                <button\n                    className=\"InputNumeric__button is-up\"\n                    onClick={() => handleChange(1)}\n                    disabled={(value === max) || isDisabledInc}\n                >\n                    +\n                </button>\n            </div>\n        </div>\n    );\n};\n","import { RolesEnum } from \"./enums\";\n\nexport interface iActiveRole {\n    id: number;\n    title: string;\n    cardImage: string;\n}\n\nexport const ACTIVE_ROLES: iActiveRole[] = [\n    {\n        id: 1,\n        title: RolesEnum.Whore,\n        cardImage: \"\"\n    },\n    {\n        id: 2,\n        title: RolesEnum.Doctor,\n        cardImage: \"\"\n    },\n    {\n        id: 3,\n        title: RolesEnum.Immortal,\n        cardImage: \"\"\n    },\n    {\n        id: 4,\n        title: RolesEnum.Sheriff,\n        cardImage: \"\"\n    }\n];","import { Checkbox } from \"@components/Checkbox/Checkbox\";\nimport { InputNumeric } from \"@components/InputNumeric/InputNumeric\";\nimport { RolesEnum } from \"@utils/enums\";\nimport { ACTIVE_ROLES, iActiveRole } from \"@utils/roles\";\nimport { FC, useEffect, useState } from \"react\";\nimport \"./Settings.styles.scss\";\n\nconst DEFAULT_CONFIG = {\n    totalPlayers: 6,\n    citizens: 5,\n    mafias: 1,\n    activeRoles: [],\n};\n\ninterface iGameConfig {\n    totalPlayers: number;\n    citizens: number;\n    mafias: number;\n    activeRoles: iActiveRole[];\n}\n\ninterface iProps {\n    onSubmit: (roles: RolesEnum[]) => void;\n}\n\nexport const Settings: FC<iProps> = ({ onSubmit }) => {\n    const [config, setConfig] = useState<iGameConfig>(DEFAULT_CONFIG);\n    const [isActiveRolesDisabled, setIsActiveRolesDisabled] = useState(false);\n\n    const updateConfig = <T extends keyof iGameConfig>(field: T, value: iGameConfig[T]) => {\n        setConfig(prevCfg => ({ ...prevCfg, [field]: value }));\n    };\n\n    const onChangeTotalPlayers = (totalPlayers: number) => {\n        updateConfig(\"totalPlayers\", totalPlayers);\n        updateConfig(\"citizens\", totalPlayers - 1);\n        updateConfig(\"mafias\", 1);\n        updateConfig(\"activeRoles\", []);\n        setIsActiveRolesDisabled(totalPlayers <= 4);\n    };\n\n    const onChangeTotalMafias = (totalMafias: number) => {\n        const totalCitizens = config.totalPlayers - totalMafias - config.activeRoles.length;\n        updateConfig(\"mafias\", totalMafias);\n        updateConfig(\"citizens\", totalCitizens);\n    };\n\n    const onChangeTotalCitizens = (totalCitizens: number) => {\n        const totalMafias = config.totalPlayers - totalCitizens - config.activeRoles.length;\n        updateConfig(\"citizens\", totalCitizens);\n        updateConfig(\"mafias\", totalMafias);\n    };\n\n    const onChangeActiveRoles = (role: iActiveRole) => {\n        const { activeRoles, citizens, mafias, totalPlayers } = config;\n        const currentIndex = activeRoles.findIndex(({ id }) => id === role.id);\n        const isRemoving = currentIndex >= 0;\n\n        const totalCitizens = citizens + (isRemoving ? 1 : -1);\n        if (\n            !isRemoving &&\n            citizens === 0 &&\n            citizens + mafias + activeRoles.length >= totalPlayers\n        ) {\n            updateConfig(\"mafias\", mafias - 1);\n        } else {\n            updateConfig(\"citizens\", totalCitizens);\n        }\n\n        updateConfig(\n            \"activeRoles\",\n            isRemoving\n                ? [...activeRoles].filter(item => item.id !== role.id)\n                : [...activeRoles, role],\n        );\n    };\n\n    useEffect(() => {\n        if (isActiveRolesDisabled) {\n            updateConfig(\"activeRoles\", []);\n            updateConfig(\"citizens\", config.totalPlayers - config.mafias);\n        }\n    }, [config.mafias, config.totalPlayers, isActiveRolesDisabled]);\n\n    const handleSubmitSettings = () => {\n        const { citizens, mafias, activeRoles } = config;\n\n        onSubmit([\n            ...Array.from(Array(citizens).fill(RolesEnum.Citizen)),\n            ...Array.from(Array(mafias).fill(RolesEnum.Mafia)),\n            ...activeRoles.map(({ title }) => title),\n        ]);\n    };\n\n    return (\n        <div className=\"Settings\">\n            <div className=\"Settings__content\">\n                <div className=\"Settings__row\">\n                    <InputNumeric\n                        label=\"Всего игроков\"\n                        value={config.totalPlayers}\n                        min={3}\n                        onChange={onChangeTotalPlayers}\n                    />\n                </div>\n                <div className=\"Settings__row\">\n                    <div>\n                        <div>\n                            <InputNumeric\n                                label=\"кол-во мирных\"\n                                value={config.citizens}\n                                min={0}\n                                onChange={onChangeTotalCitizens}\n                                isDisabledInc={\n                                    config.citizens + config.activeRoles.length >=\n                                    config.totalPlayers - 1\n                                }\n                                isDisabledDec={\n                                    config.citizens + config.activeRoles.length <= config.mafias\n                                }\n                            />\n                        </div>\n                        <br />\n                        <br />\n                        <div>\n                            <InputNumeric\n                                label=\"кол-во мафий\"\n                                value={config.mafias}\n                                min={1}\n                                isDisabledInc={\n                                    config.mafias >= config.citizens + config.activeRoles.length ||\n                                    config.citizens === 0\n                                }\n                                onChange={onChangeTotalMafias}\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                {!isActiveRolesDisabled && (\n                    <div className=\"Settings__row\">\n                        <div className=\"Settings__title\">Активные роли</div>\n                        <div className=\"Settings__roles\">\n                            {ACTIVE_ROLES.map(role => (\n                                <Checkbox\n                                    onChange={() => onChangeActiveRoles(role)}\n                                    label={role.title}\n                                    key={role.id}\n                                    isChecked={\n                                        !!config.activeRoles.find(item => item.id === role.id)\n                                    }\n                                />\n                            ))}\n                        </div>\n                    </div>\n                )}\n            </div>\n            <div className=\"Settings__action\">\n                <button onClick={handleSubmitSettings}>ОК</button>\n            </div>\n        </div>\n    );\n};\n","import { PlayerRoles } from \"@pages/PlayerRoles/PlayerRoles\";\nimport { Results } from \"@pages/Results/Results\";\nimport { Settings } from \"@pages/Settings/Settings\";\nimport { GameStep, RolesEnum } from \"@utils/enums\";\nimport { shuffle } from \"@utils/helpers\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.styles.scss\";\n\nexport const App = () => {\n    const [step, setStep] = useState<GameStep>(GameStep.Settings);\n    const [selectedRoles, setSelectedRoles] = useState<RolesEnum[]>([]);\n\n    const onSubmitSettings = (roles: RolesEnum[]) => {\n        setSelectedRoles(shuffle(roles));\n        setStep(GameStep.Roles);\n    };\n\n    const onShowResult = () => {\n        setStep(GameStep.Final);\n    };\n\n    useEffect(() => {\n        const html = document.documentElement;\n\n        if (step === GameStep.Roles) {\n            html.classList.add(\"is-fixed\");\n        } else {\n            html.classList.remove(\"is-fixed\");\n        }\n    }, [step]);\n\n    return (\n        <div className=\"App\">\n            {step === GameStep.Settings && (\n                <Settings onSubmit={onSubmitSettings} />\n            )}\n            {step === GameStep.Roles && (\n                <PlayerRoles\n                    roles={selectedRoles}\n                    onShowResult={onShowResult}\n                />\n            )}\n            {step === GameStep.Final && (\n                <Results roles={selectedRoles} />\n            )}\n        </div>\n    );\n};\n","export const toggleInArray = <T>(array: T[], ...values: T[]) => {\n    let result = [...array];\n    if (values.length === 0) return [];\n    values.forEach((value) => {\n        if (array.includes(value)) {\n            result = result.filter((item) => item !== value);\n        } else {\n            result = [...result, value];\n        }\n    });\n    return result;\n}\n\nexport function shuffle<T>(array: T[]) {\n    let currentIndex = array.length;\n    let randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.scss';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}