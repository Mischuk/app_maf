{"version":3,"sources":["serviceWorkerRegistration.ts","reportWebVitals.ts","utils/enums.ts","components/Card/Card.tsx","pages/PlayerRoles/PlayerRoles.tsx","pages/Results/Results.tsx","components/Checkbox/Checkbox.tsx","components/InputNumeric/InputNumeric.tsx","utils/roles.ts","pages/Settings/Settings.tsx","App.tsx","utils/helpers.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","GameStep","RolesEnum","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Card","title","onNextRole","position","useState","showRole","setShowRole","className","cn","Mafia","Maniac","onClick","PlayerRoles","roles","onShowResult","playerIndex","setPlayerIndex","length","Results","reset","isVisible","setIsVisible","map","el","idx","Checkbox","isChecked","onChange","label","isDisabled","InputNumeric","value","isDisabledDec","isDisabledInc","min","max","handleChange","step","disabled","ACTIVE_ROLES","id","Whore","desc","Doctor","Immortal","Comissar","Reanymator","Judge","DEFAULT_CONFIG","totalPlayers","citizens","mafias","activeRoles","Settings","onSubmit","setConfig","isActiveRolesDisabled","setIsActiveRolesDisabled","isTotalLocked","setIsTotalLocked","isInfoOpen","setIsInfoOpen","updateConfig","field","prevCfg","useEffect","totalCitizens","totalMafias","role","isDoctor","isReanymator","find","item","isRemoving","findIndex","filter","onChangeActiveRoles","Array","from","fill","Citizen","App","setStep","selectedRoles","setSelectedRoles","array","randomIndex","currentIndex","Math","floor","random","shuffle","Roles","Final","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.8899c9aa.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export enum GameStep {\n    Settings = 0,\n    Roles = 1,\n    Final = 2\n}\n\nexport enum RolesEnum {\n    Citizen = \"Мирный житель\",\n    Mafia = \"Мафия\",\n    Doctor = \"Доктор\",\n    Immortal = \"Бессмертный\",\n    Comissar = \"Комиссар\",\n    Maniac = \"Маньяк\",\n    Reanymator = \"Реаниматор\",\n    Whore = \"Проститутка\",\n    Judge = \"Судья\"\n}\n","import { RolesEnum } from \"@utils/enums\";\nimport { FC, useState } from \"react\";\nimport cn from \"classnames\";\nimport \"./Card.styles.scss\";\n\ninterface iProps {\n    title: string;\n    onNextRole: () => void;\n    position: number;\n}\n\nexport const Card: FC<iProps> = ({ title, onNextRole, position }) => {\n    const [showRole, setShowRole] = useState(false);\n\n    const handleChangeCard = () => {\n        if (showRole) {\n            setShowRole(false);\n\n            onNextRole();\n        } else {\n            setShowRole(true);\n        }\n    };\n\n    return (\n        <div\n            className={cn(\n                \"Card\",\n                !showRole && \"is-closed\",\n                (title === RolesEnum.Mafia || title === RolesEnum.Maniac) && showRole ? \"is-black\" : \"is-red\",\n            )}\n            onClick={handleChangeCard}\n        >\n            {!showRole && <div className=\"Card__text\">Игрок {position}</div>}\n            {showRole && <div className=\"Card__text\">{title}</div>}\n        </div>\n    );\n};\n","import { Card } from \"@components/Card/Card\";\nimport { RolesEnum } from \"@utils/enums\";\nimport { FC, useState } from \"react\";\nimport \"./PlayerRoles.styles.scss\";\n\ninterface iProps {\n    roles: RolesEnum[];\n    onShowResult: () => void;\n}\n\nexport const PlayerRoles: FC<iProps> = ({ roles, onShowResult }) => {\n    const [playerIndex, setPlayerIndex] = useState(0);\n\n    const onNextRole = () => {\n        if (playerIndex + 1 <= roles.length - 1) {\n            setPlayerIndex(playerIndex + 1);\n        } else {\n            onShowResult();\n        }\n    };\n\n    return (\n        <div className=\"PlayerRoles\">\n            <div className=\"PlayerRoles__content\">\n                <Card\n                    title={roles[playerIndex]}\n                    onNextRole={onNextRole}\n                    position={playerIndex + 1}\n                />\n            </div>\n        </div>\n    );\n};\n","import { FC, useState } from \"react\";\nimport \"./Results.styles.scss\";\n\ninterface iProps {\n    roles: string[];\n    reset: () => void;\n}\n\nexport const Results: FC<iProps> = ({ roles, reset }) => {\n    const [isVisible, setIsVisible] = useState(false);\n    return (\n        <div className=\"Results\">\n            <br/>\n            <br/>\n            <div className=\"Results__toggle\" onClick={() => setIsVisible(!isVisible)}>\n                {isVisible ? \"Hide\" : \"Show\"} all roles\n            </div>\n            {isVisible && (\n                <div className=\"Results__content\">\n                    {roles.map((el, idx) => {\n                        return (\n                            <div key={idx}>\n                                Player #{idx + 1}: {el}\n                            </div>\n                        );\n                    })}\n                </div>\n            )}\n\n            <br/>\n            <br/>\n\n            <button onClick={reset}>RESET</button>\n        </div>\n    );\n};\n","import { FC } from \"react\";\nimport cn from \"classnames\";\nimport \"./Checkbox.styles.scss\";\n\ninterface iProps {\n    isChecked: boolean;\n    onChange: () => void;\n    label: string;\n    isDisabled?: boolean;\n}\nexport const Checkbox: FC<iProps> = ({ isChecked, onChange, label, isDisabled }) => {\n\n    const handleChange = () => {\n        if (isDisabled) return;\n        onChange();\n    }\n    return (\n        <div className={cn(\"Checkbox\", isChecked && \"is-checked\", isDisabled && \"is-disabled\")} onClick={handleChange}>\n            <div className=\"Checkbox__icon\"></div>\n            <div className=\"Checkbox__label\">{label}</div>\n        </div>\n    );\n};\n","import { FC } from \"react\";\nimport cn from \"classnames\";\nimport \"./InputNumeric.styles.scss\";\n\ninterface iProps {\n    value: number;\n    onChange: (value: number) => void;\n    isDisabledDec?: boolean;\n    isDisabledInc?: boolean;\n    label?: string;\n    min?: number;\n    max?: number;\n    className?: string;\n}\n\nexport const InputNumeric: FC<iProps> = ({ value, onChange, isDisabledDec, isDisabledInc, label, min, max, className = \"\" }) => {\n    const handleChange = (step: number) => {\n        onChange(value + step);\n    };\n    return (\n        <div className={cn(\"InputNumeric\", className)}>\n            {label && <div className=\"InputNumeric__label\">{label}</div>}\n\n            <div className=\"InputNumeric__control\">\n                <button\n                    className=\"InputNumeric__button is-down\"\n                    onClick={() => handleChange(-1)}\n                    disabled={(value === min) || isDisabledDec}\n                >\n                    -\n                </button>\n\n                <div className=\"InputNumeric__input\">{value}</div>\n\n                <button\n                    className=\"InputNumeric__button is-up\"\n                    onClick={() => handleChange(1)}\n                    disabled={(value === max) || isDisabledInc}\n                >\n                    +\n                </button>\n            </div>\n        </div>\n    );\n};\n","import { RolesEnum } from \"./enums\";\n\nexport interface iActiveRole {\n    id: number;\n    title: string\n    desc: string;\n}\n\nexport const ACTIVE_ROLES: iActiveRole[] = [\n    {\n        id: 1,\n        title: RolesEnum.Whore,\n        desc: \"Проститутка просыпается ночью. Выбирает одного игрока. Нельзя выбирать одну и ту же цель две ночи подряд. Если днем цель проститутки хотят казнить на окончательном голосовании, то Ведущий должен объявить, что выбранный игрок имеет алиби. В этом случае голосование тут же заканчивается без результатов и начинается ночь.\"\n    },\n    {\n        id: 2,\n        title: RolesEnum.Doctor,\n        desc: \"Доктор каждую ночь может посетить одного игрока и спасти его жизнь в случае попытки его убийства мафией или маньяком. Доктор не может два раза подряд лечить одного и того же игрока\"\n    },\n    {\n        id: 3,\n        title: RolesEnum.Immortal,\n        desc: \"По сути своей Бессмертный — тот же Мирный Житель, отличающийся лишь тем, что ночью он абсолютно неуязвим. Главное в вашей роли — дать понять, что вы — мирный, и не дать убить себя днем.\"\n    },\n    {\n        id: 4,\n        title: RolesEnum.Comissar,\n        desc: \"Играет за «честных». После того, как ведущий объявляет: «На расследование выходит комиссар». «Комиссар» открывает глаза и указывает ведущему на одного из игроков. Ведущий показывает знаками «мафия» - большой палец вниз или «честный» - большой палец вверх. После этого ведущий объявляет: «Комиссар провел расследование и уснул». «Комиссар» закрывает глаза. «Комиссар» тоже вынужден скрываться, чтобы мафия не смогла его вычислить и быстро убить.\"\n    },\n    {\n        id: 5,\n        title: RolesEnum.Maniac,\n        desc: \"Маньяк - одна из самых противоречивых ролей в игре. Несмотря на плохую репутацию среди граждан города, маньяк может помочь мирным жителям, убивая членов мафии по ночам. Однако, пострадать от его действий могут как и простые граждане, так и полиция или доктор. Может победить, только если останется один.\"\n    },\n    {\n        id: 6,\n        title: RolesEnum.Reanymator,\n        desc: \"Вместо доктора. Может спасти от смерти одного из жителей города. Просыпается последним. Ведущий показывает, кто убиты, и он, по своему выбору, реанимирует убитого или нет.\"\n    },\n    {\n        id: 7,\n        title: RolesEnum.Judge,\n        desc: \"просыпается ночью. Может выбрать одного игрока. Его цель попадает в тюрьму — этот игрок не может использовать свои способности ночью и голосовать днем, но может участвовать в обсуждениях. После смерти Судьи все заключенные выходят на свободу, то есть снова могут пользоваться своими способностями ночью и голосовать днем. Если Судья хочет, то он может выбрать целью своей способности уже заключенного в тюрьму игрока, чтобы освободить его.\"\n    }\n];","import { Checkbox } from \"@components/Checkbox/Checkbox\";\nimport { InputNumeric } from \"@components/InputNumeric/InputNumeric\";\nimport { RolesEnum } from \"@utils/enums\";\nimport { ACTIVE_ROLES, iActiveRole } from \"@utils/roles\";\nimport { FC, useEffect, useState } from \"react\";\nimport \"./Settings.styles.scss\";\n\nconst DEFAULT_CONFIG = {\n    totalPlayers: 6,\n    citizens: 5,\n    mafias: 1,\n    activeRoles: [],\n};\n\ninterface iGameConfig {\n    totalPlayers: number;\n    citizens: number;\n    mafias: number;\n    activeRoles: iActiveRole[];\n}\n\ninterface iProps {\n    onSubmit: (roles: RolesEnum[]) => void;\n}\n\nexport const Settings: FC<iProps> = ({ onSubmit }) => {\n    const [config, setConfig] = useState<iGameConfig>(DEFAULT_CONFIG);\n    const [isActiveRolesDisabled, setIsActiveRolesDisabled] = useState(false);\n    const [isTotalLocked, setIsTotalLocked] = useState(false);\n    const [isInfoOpen, setIsInfoOpen] = useState(false);\n\n    const updateConfig = <T extends keyof iGameConfig>(field: T, value: iGameConfig[T]) => {\n        setConfig(prevCfg => ({ ...prevCfg, [field]: value }));\n    };\n\n    const onChangeTotalPlayers = (totalPlayers: number) => {\n        updateConfig(\"totalPlayers\", totalPlayers);\n        updateConfig(\"citizens\", totalPlayers - 1);\n        updateConfig(\"mafias\", 1);\n        updateConfig(\"activeRoles\", []);\n        setIsActiveRolesDisabled(totalPlayers <= 4);\n    };\n\n    const onChangeTotalMafias = (totalMafias: number) => {\n        const totalCitizens = config.totalPlayers - totalMafias - config.activeRoles.length;\n        updateConfig(\"mafias\", totalMafias);\n        updateConfig(\"citizens\", totalCitizens);\n    };\n\n    const onChangeTotalCitizens = (totalCitizens: number) => {\n        const totalMafias = config.totalPlayers - totalCitizens - config.activeRoles.length;\n        updateConfig(\"citizens\", totalCitizens);\n        updateConfig(\"mafias\", totalMafias);\n    };\n\n    const onChangeActiveRoles = (role: iActiveRole) => {\n        const { activeRoles, citizens, mafias, totalPlayers } = config;\n        const currentIndex = activeRoles.findIndex(({ id }) => id === role.id);\n        const isRemoving = currentIndex >= 0;\n\n        const totalCitizens = citizens + (isRemoving ? 1 : -1);\n        if (\n            !isRemoving &&\n            citizens === 0 &&\n            citizens + mafias + activeRoles.length >= totalPlayers\n        ) {\n            updateConfig(\"mafias\", mafias - 1);\n        } else {\n            updateConfig(\"citizens\", totalCitizens);\n        }\n\n        updateConfig(\n            \"activeRoles\",\n            isRemoving\n                ? [...activeRoles].filter(item => item.id !== role.id)\n                : [...activeRoles, role],\n        );\n    };\n\n    useEffect(() => {\n        if (isActiveRolesDisabled) {\n            updateConfig(\"activeRoles\", []);\n            updateConfig(\"citizens\", config.totalPlayers - config.mafias);\n        }\n    }, [config.mafias, config.totalPlayers, isActiveRolesDisabled]);\n\n    const handleSubmitSettings = () => {\n        const { citizens, mafias, activeRoles } = config;\n\n        onSubmit([\n            ...Array.from(Array(citizens).fill(RolesEnum.Citizen)),\n            ...Array.from(Array(mafias).fill(RolesEnum.Mafia)),\n            ...activeRoles.map(({ title }) => title),\n        ]);\n    };\n\n    return (\n        <div className=\"Settings\">\n            {!isTotalLocked && (\n                <div className=\"Settings__wrapper\">\n                    <div className=\"Settings__total\">\n                        <InputNumeric\n                            label=\"TOTAL PLAYERS\"\n                            value={config.totalPlayers}\n                            min={3}\n                            onChange={onChangeTotalPlayers}\n                        />\n\n                        <div className=\"Settings__next\">\n                            <div className=\"Settings__button-next\" onClick={() => setIsTotalLocked(true)}>NEXT</div>\n                        </div>\n                    </div>\n\n\n                </div>\n            )}\n\n            {isTotalLocked && (\n                <div className=\"Settings__content\">\n                    <div className=\"Settings__row\">\n                        <div>\n                            <InputNumeric\n                                label=\"Всего мирных\"\n                                value={config.citizens}\n                                min={0}\n                                onChange={onChangeTotalCitizens}\n                                isDisabledInc={\n                                    config.citizens + config.activeRoles.length >=\n                                    config.totalPlayers - 1\n                                }\n                                isDisabledDec={\n                                    config.citizens + config.activeRoles.length <= config.mafias\n                                }\n                                className=\"is-columns\"\n                            />\n                        </div>\n                        <br />\n                        <br />\n                        <div>\n                            <InputNumeric\n                                label=\"Всего мафий\"\n                                value={config.mafias}\n                                min={1}\n                                isDisabledInc={\n                                    config.mafias >= config.citizens + config.activeRoles.length ||\n                                    config.citizens === 0\n                                }\n                                onChange={onChangeTotalMafias}\n                                className=\"is-columns\"\n                            />\n                        </div>\n                    </div>\n\n                    {!isActiveRolesDisabled && (\n                        <div className=\"Settings__row\">\n                            <div className=\"Settings__title\">Активные роли <div className=\"Settings__title-info\" onClick={() => setIsInfoOpen(true)}>?</div></div>\n                            <div className=\"Settings__roles\">\n                                {ACTIVE_ROLES.map(role => {\n                                    const isDoctor = role.title === RolesEnum.Doctor;\n                                    const isReanymator = role.title === RolesEnum.Reanymator;\n                                    const isDisabled = (isDoctor && config.activeRoles.find(item => item.title === RolesEnum.Reanymator)) || (isReanymator && config.activeRoles.find(item => item.title === RolesEnum.Doctor)) ? true : false;\n                                    const isChecked = !!config.activeRoles.find(item => item.id === role.id);\n                                    return (\n                                        <Checkbox\n                                            onChange={() => onChangeActiveRoles(role)}\n                                            label={role.title}\n                                            key={role.id}\n                                            isChecked={isChecked}\n                                            isDisabled={isDisabled || (config.totalPlayers - config.activeRoles.length < 3 && !isChecked)}\n                                        />\n                                    )\n                                })}\n                            </div>\n                            <div className=\"Settings__action\">\n                                <button onClick={handleSubmitSettings}>GO</button>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            )}\n            {isInfoOpen && (\n                <div className=\"Settings__info\">\n                    <div className=\"Settings__info-close\" onClick={() => setIsInfoOpen(false)}>x</div>\n                    <div className=\"Settings__info-list\">\n                        {ACTIVE_ROLES.map(role => {\n                            return <div className=\"Settings__info-item\">\n                                <div className=\"Settings__info-item-title\">{role.title}</div>\n                                <div className=\"Settings__info-item-desc\">{role.desc}</div>\n                            </div>\n                        })}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n","import { PlayerRoles } from \"@pages/PlayerRoles/PlayerRoles\";\nimport { Results } from \"@pages/Results/Results\";\nimport { Settings } from \"@pages/Settings/Settings\";\nimport { GameStep, RolesEnum } from \"@utils/enums\";\nimport { shuffle } from \"@utils/helpers\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.styles.scss\";\n\nexport const App = () => {\n    const [step, setStep] = useState<GameStep>(GameStep.Settings);\n    const [selectedRoles, setSelectedRoles] = useState<RolesEnum[]>([]);\n\n    const onSubmitSettings = (roles: RolesEnum[]) => {\n        setSelectedRoles(shuffle(roles));\n        setStep(GameStep.Roles);\n    };\n\n    const onShowResult = () => {\n        setStep(GameStep.Final);\n    };\n\n    const handleReset = () => {\n        setStep(GameStep.Settings);\n        setSelectedRoles([]);\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"App__orientation\">ROTATE <br/><br/>DEVICE</div>\n\n\n           {step === GameStep.Settings && (\n                <Settings onSubmit={onSubmitSettings} />\n            )}\n            {step === GameStep.Roles && (\n                <PlayerRoles\n                    roles={selectedRoles}\n                    onShowResult={onShowResult}\n                />\n            )}\n            {step === GameStep.Final && (\n                <Results roles={selectedRoles} reset={handleReset} />\n            )}\n        </div>\n    );\n};\n","export const toggleInArray = <T>(array: T[], ...values: T[]) => {\n    let result = [...array];\n    if (values.length === 0) return [];\n    values.forEach((value) => {\n        if (array.includes(value)) {\n            result = result.filter((item) => item !== value);\n        } else {\n            result = [...result, value];\n        }\n    });\n    return result;\n}\n\nexport function shuffle<T>(array: T[]) {\n    let currentIndex = array.length;\n    let randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.scss';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}