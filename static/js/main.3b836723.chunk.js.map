{"version":3,"sources":["serviceWorkerRegistration.ts","reportWebVitals.ts","utils/enums.ts","components/Checkbox/Checkbox.tsx","components/InputNumeric/InputNumeric.tsx","utils/roles.ts","pages/Settings/Settings.tsx","App.tsx","utils/helpers.ts","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","GameStep","RolesEnum","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Checkbox","isChecked","onChange","label","isDisabled","className","cn","onClick","InputNumeric","value","isDisabledDec","isDisabledInc","min","max","handleChange","step","disabled","ACTIVE_ROLES","id","title","Whore","desc","Doctor","Immortal","Comissar","Maniac","Reanymator","Judge","DEFAULT_CONFIG","totalPlayers","citizens","mafias","activeRoles","Settings","onSubmit","useState","setConfig","isActiveRolesDisabled","setIsActiveRolesDisabled","isTotalLocked","setIsTotalLocked","updateConfig","field","prevCfg","useEffect","totalCitizens","totalMafias","length","map","role","isDoctor","isReanymator","find","item","isRemoving","findIndex","filter","onChangeActiveRoles","Array","from","fill","Citizen","Mafia","App","setStep","setSelectedRoles","html","document","documentElement","Roles","classList","add","remove","roles","array","randomIndex","currentIndex","Math","floor","random","shuffle","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.3b836723.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export enum GameStep {\n    Settings = 0,\n    Roles = 1,\n    Final = 2\n}\n\nexport enum RolesEnum {\n    Citizen = \"Мирный житель\",\n    Mafia = \"Мафия\",\n    Doctor = \"Доктор\",\n    Immortal = \"Бессмертный\",\n    Comissar = \"Комиссар\",\n    Maniac = \"Маньяк\",\n    Reanymator = \"Реаниматор (вместо доктора)\",\n    Whore = \"Проститутка\",\n    Judge = \"Судья\"\n}\n","import { FC } from \"react\";\nimport cn from \"classnames\";\nimport \"./Checkbox.styles.scss\";\n\ninterface iProps {\n    isChecked: boolean;\n    onChange: () => void;\n    label: string;\n    isDisabled?: boolean;\n}\nexport const Checkbox: FC<iProps> = ({ isChecked, onChange, label, isDisabled }) => {\n\n    const handleChange = () => {\n        if (isDisabled) return;\n        onChange();\n    }\n    return (\n        <div className={cn(\"Checkbox\", isChecked && \"is-checked\", isDisabled && \"is-disabled\")} onClick={handleChange}>\n            <div className=\"Checkbox__icon\"></div>\n            <div className=\"Checkbox__label\">{label}</div>\n        </div>\n    );\n};\n","import { FC } from \"react\";\nimport cn from \"classnames\";\nimport \"./InputNumeric.styles.scss\";\n\ninterface iProps {\n    value: number;\n    onChange: (value: number) => void;\n    isDisabledDec?: boolean;\n    isDisabledInc?: boolean;\n    label?: string;\n    min?: number;\n    max?: number;\n    className?: string;\n}\n\nexport const InputNumeric: FC<iProps> = ({ value, onChange, isDisabledDec, isDisabledInc, label, min, max, className = \"\" }) => {\n    const handleChange = (step: number) => {\n        onChange(value + step);\n    };\n    return (\n        <div className={cn(\"InputNumeric\", className)}>\n            {label && <div className=\"InputNumeric__label\">{label}</div>}\n\n            <div className=\"InputNumeric__control\">\n                <button\n                    className=\"InputNumeric__button is-down\"\n                    onClick={() => handleChange(-1)}\n                    disabled={(value === min) || isDisabledDec}\n                >\n                    -\n                </button>\n\n                <div className=\"InputNumeric__input\">{value}</div>\n\n                <button\n                    className=\"InputNumeric__button is-up\"\n                    onClick={() => handleChange(1)}\n                    disabled={(value === max) || isDisabledInc}\n                >\n                    +\n                </button>\n            </div>\n        </div>\n    );\n};\n","import { RolesEnum } from \"./enums\";\n\nexport interface iActiveRole {\n    id: number;\n    title: string\n    desc: string;\n}\n\nexport const ACTIVE_ROLES: iActiveRole[] = [\n    {\n        id: 1,\n        title: RolesEnum.Whore,\n        desc: \"Проститутка просыпается ночью. Выбирает одного игрока. Нельзя выбирать одну и ту же цель две ночи подряд. Если днем цель проститутки хотят казнить на окончательном голосовании, то Ведущий должен объявить, что выбранный игрок имеет алиби. В этом случае голосование тут же заканчивается без результатов и начинается ночь.\"\n    },\n    {\n        id: 2,\n        title: RolesEnum.Doctor,\n        desc: \"Доктор каждую ночь может посетить одного игрока и спасти его жизнь в случае попытки его убийства мафией или маньяком. Доктор не может два раза подряд лечить одного и того же игрока\"\n    },\n    {\n        id: 3,\n        title: RolesEnum.Immortal,\n        desc: \"По сути своей Бессмертный — тот же Мирный Житель, отличающийся лишь тем, что ночью он абсолютно неуязвим. Главное в вашей роли — дать понять, что вы — мирный, и не дать убить себя днем.\"\n    },\n    {\n        id: 4,\n        title: RolesEnum.Comissar,\n        desc: \"Играет за «честных». После того, как ведущий объявляет: «На расследование выходит комиссар». «Комиссар» открывает глаза и указывает ведущему на одного из игроков. Ведущий показывает знаками «мафия» - большой палец вниз или «честный» - большой палец вверх. После этого ведущий объявляет: «Комиссар провел расследование и уснул». «Комиссар» закрывает глаза. «Комиссар» тоже вынужден скрываться, чтобы мафия не смогла его вычислить и быстро убить.\"\n    },\n    {\n        id: 5,\n        title: RolesEnum.Maniac,\n        desc: \"Маньяк - одна из самых противоречивых ролей в игре. Несмотря на плохую репутацию среди граждан города, маньяк может помочь мирным жителям, убивая членов мафии по ночам. Однако, пострадать от его действий могут как и простые граждане, так и полиция или доктор. Может победить, только если останется один.\"\n    },\n    {\n        id: 6,\n        title: RolesEnum.Reanymator,\n        desc: \"Может спасти от смерти одного из жителей города. Просыпается последним. Ведущий показывает, кто убиты, и он, по своему выбору, реанимирует убитого или нет.\"\n    },\n    {\n        id: 7,\n        title: RolesEnum.Judge,\n        desc: \"просыпается ночью. Может выбрать одного игрока. Его цель попадает в тюрьму — этот игрок не может использовать свои способности ночью и голосовать днем, но может участвовать в обсуждениях. После смерти Судьи все заключенные выходят на свободу, то есть снова могут пользоваться своими способностями ночью и голосовать днем. Если Судья хочет, то он может выбрать целью своей способности уже заключенного в тюрьму игрока, чтобы освободить его.\"\n    }\n];","import { Checkbox } from \"@components/Checkbox/Checkbox\";\nimport { InputNumeric } from \"@components/InputNumeric/InputNumeric\";\nimport { RolesEnum } from \"@utils/enums\";\nimport { ACTIVE_ROLES, iActiveRole } from \"@utils/roles\";\nimport { FC, useEffect, useState } from \"react\";\nimport \"./Settings.styles.scss\";\n\nconst DEFAULT_CONFIG = {\n    totalPlayers: 6,\n    citizens: 5,\n    mafias: 1,\n    activeRoles: [],\n};\n\ninterface iGameConfig {\n    totalPlayers: number;\n    citizens: number;\n    mafias: number;\n    activeRoles: iActiveRole[];\n}\n\ninterface iProps {\n    onSubmit: (roles: RolesEnum[]) => void;\n}\n\nexport const Settings: FC<iProps> = ({ onSubmit }) => {\n    const [config, setConfig] = useState<iGameConfig>(DEFAULT_CONFIG);\n    console.log(`config: `, config);\n    const [isActiveRolesDisabled, setIsActiveRolesDisabled] = useState(false);\n    const [isTotalLocked, setIsTotalLocked] = useState(false);\n\n    const updateConfig = <T extends keyof iGameConfig>(field: T, value: iGameConfig[T]) => {\n        setConfig(prevCfg => ({ ...prevCfg, [field]: value }));\n    };\n\n    const onChangeTotalPlayers = (totalPlayers: number) => {\n        updateConfig(\"totalPlayers\", totalPlayers);\n        updateConfig(\"citizens\", totalPlayers - 1);\n        updateConfig(\"mafias\", 1);\n        updateConfig(\"activeRoles\", []);\n        setIsActiveRolesDisabled(totalPlayers <= 4);\n    };\n\n    const onChangeTotalMafias = (totalMafias: number) => {\n        const totalCitizens = config.totalPlayers - totalMafias - config.activeRoles.length;\n        updateConfig(\"mafias\", totalMafias);\n        updateConfig(\"citizens\", totalCitizens);\n    };\n\n    const onChangeTotalCitizens = (totalCitizens: number) => {\n        const totalMafias = config.totalPlayers - totalCitizens - config.activeRoles.length;\n        updateConfig(\"citizens\", totalCitizens);\n        updateConfig(\"mafias\", totalMafias);\n    };\n\n    const onChangeActiveRoles = (role: iActiveRole) => {\n        const { activeRoles, citizens, mafias, totalPlayers } = config;\n        const currentIndex = activeRoles.findIndex(({ id }) => id === role.id);\n        const isRemoving = currentIndex >= 0;\n\n        const totalCitizens = citizens + (isRemoving ? 1 : -1);\n        if (\n            !isRemoving &&\n            citizens === 0 &&\n            citizens + mafias + activeRoles.length >= totalPlayers\n        ) {\n            updateConfig(\"mafias\", mafias - 1);\n        } else {\n            updateConfig(\"citizens\", totalCitizens);\n        }\n\n        updateConfig(\n            \"activeRoles\",\n            isRemoving\n                ? [...activeRoles].filter(item => item.id !== role.id)\n                : [...activeRoles, role],\n        );\n    };\n\n    useEffect(() => {\n        if (isActiveRolesDisabled) {\n            updateConfig(\"activeRoles\", []);\n            updateConfig(\"citizens\", config.totalPlayers - config.mafias);\n        }\n    }, [config.mafias, config.totalPlayers, isActiveRolesDisabled]);\n\n    const handleSubmitSettings = () => {\n        const { citizens, mafias, activeRoles } = config;\n\n        onSubmit([\n            ...Array.from(Array(citizens).fill(RolesEnum.Citizen)),\n            ...Array.from(Array(mafias).fill(RolesEnum.Mafia)),\n            ...activeRoles.map(({ title }) => title),\n        ]);\n    };\n\n    return (\n        <div className=\"Settings\">\n            {!isTotalLocked && (\n                <div className=\"Settings__wrapper\">\n                    <div className=\"Settings__total\">\n                        <InputNumeric\n                            label=\"TOTAL PLAYERS\"\n                            value={config.totalPlayers}\n                            min={3}\n                            onChange={onChangeTotalPlayers}\n                        />\n\n                        <div className=\"Settings__next\">\n                            <div className=\"Settings__button-next\" onClick={() => setIsTotalLocked(true)}>NEXT</div>\n                        </div>\n                    </div>\n\n\n                </div>\n            )}\n\n            {isTotalLocked && (\n                <div className=\"Settings__content\">\n                    <div className=\"Settings__row\">\n                        <div>\n                            <InputNumeric\n                                label=\"Всего мирных\"\n                                value={config.citizens}\n                                min={0}\n                                onChange={onChangeTotalCitizens}\n                                isDisabledInc={\n                                    config.citizens + config.activeRoles.length >=\n                                    config.totalPlayers - 1\n                                }\n                                isDisabledDec={\n                                    config.citizens + config.activeRoles.length <= config.mafias\n                                }\n                                className=\"is-columns\"\n                            />\n                        </div>\n                        <br />\n                        <br />\n                        <div>\n                            <InputNumeric\n                                label=\"Всего мафий\"\n                                value={config.mafias}\n                                min={1}\n                                isDisabledInc={\n                                    config.mafias >= config.citizens + config.activeRoles.length ||\n                                    config.citizens === 0\n                                }\n                                onChange={onChangeTotalMafias}\n                                className=\"is-columns\"\n                            />\n                        </div>\n                    </div>\n\n                    {!isActiveRolesDisabled && (\n                        <div className=\"Settings__row\">\n                            <div className=\"Settings__title\">Активные роли <div className=\"Settings__title-info\">?</div></div>\n                            <div className=\"Settings__roles\">\n                                {ACTIVE_ROLES.map(role => {\n                                    const isDoctor = role.title === RolesEnum.Doctor;\n                                    const isReanymator = role.title === RolesEnum.Reanymator;\n                                    const isDisabled = (isDoctor && config.activeRoles.find(item => item.title === RolesEnum.Reanymator)) || (isReanymator && config.activeRoles.find(item => item.title === RolesEnum.Doctor)) ? true : false;\n                                    const isChecked = !!config.activeRoles.find(item => item.id === role.id);\n                                    return (\n                                        <Checkbox\n                                            onChange={() => onChangeActiveRoles(role)}\n                                            label={role.title}\n                                            key={role.id}\n                                            isChecked={isChecked}\n                                            isDisabled={isDisabled || (config.totalPlayers - config.activeRoles.length < 3 && !isChecked)}\n                                        />\n                                    )\n                                })}\n                            </div>\n                            <div className=\"Settings__action\">\n                                <button onClick={handleSubmitSettings}>GO</button>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n","import { PlayerRoles } from \"@pages/PlayerRoles/PlayerRoles\";\nimport { Results } from \"@pages/Results/Results\";\nimport { Settings } from \"@pages/Settings/Settings\";\nimport { GameStep, RolesEnum } from \"@utils/enums\";\nimport { shuffle } from \"@utils/helpers\";\nimport { useEffect, useState } from \"react\";\nimport \"./App.styles.scss\";\n\nexport const App = () => {\n    const [step, setStep] = useState<GameStep>(GameStep.Settings);\n    const [selectedRoles, setSelectedRoles] = useState<RolesEnum[]>([]);\n\n    const onSubmitSettings = (roles: RolesEnum[]) => {\n        setSelectedRoles(shuffle(roles));\n        setStep(GameStep.Roles);\n    };\n\n    const onShowResult = () => {\n        setStep(GameStep.Final);\n    };\n\n    useEffect(() => {\n        const html = document.documentElement;\n\n        if (step === GameStep.Roles) {\n            html.classList.add(\"is-fixed\");\n        } else {\n            html.classList.remove(\"is-fixed\");\n        }\n    }, [step]);\n\n    return (\n        <div className=\"App\">\n            <div className=\"App__orientation\">ROTATE <br/><br/>DEVICE</div>\n            <Settings onSubmit={onSubmitSettings} />\n\n            {/* {step === GameStep.Settings && (\n                <Settings onSubmit={onSubmitSettings} />\n            )}\n            {step === GameStep.Roles && (\n                <PlayerRoles\n                    roles={selectedRoles}\n                    onShowResult={onShowResult}\n                />\n            )}\n            {step === GameStep.Final && (\n                <Results roles={selectedRoles} />\n            )} */}\n        </div>\n    );\n};\n","export const toggleInArray = <T>(array: T[], ...values: T[]) => {\n    let result = [...array];\n    if (values.length === 0) return [];\n    values.forEach((value) => {\n        if (array.includes(value)) {\n            result = result.filter((item) => item !== value);\n        } else {\n            result = [...result, value];\n        }\n    });\n    return result;\n}\n\nexport function shuffle<T>(array: T[]) {\n    let currentIndex = array.length;\n    let randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.scss';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}